@startuml Complete_Real_Estate_Class_Diagram

title Real Estate Application - Complete Class Diagram
skinparam classAttributeIconSize 0
skinparam monochrome false
skinparam backgroundColor #FFFFFF

!define ENTITY_COLOR #E1F5FE
!define FORM_COLOR #F3E5F5
!define VIEW_COLOR #E8F5E8
!define UTILITY_COLOR #FFF3E0

' ===========================================
' MODELS (ENTITIES)
' ===========================================

package "Models" <<Frame>> {

    class User <<ENTITY_COLOR>> {
        - id: AutoField
        + username: CharField(150)
        + first_name: CharField(150)
        + last_name: CharField(150)
        + email: EmailField
        + password: CharField(128)
        + is_staff: BooleanField
        + is_active: BooleanField
        + date_joined: DateTimeField
        + last_login: DateTimeField
        + user_type: CharField(10)
        + profile_image: ImageField
        + unique_key: CharField(9)
        + phone_number: CharField(15)
        + bio: TextField
        --
        + USER_TYPE_CHOICES: tuple
        --
        + is_agent(): bool
        + is_customer(): bool
        + is_admin_user(): bool
        + __str__(): str
    }

    class Property <<ENTITY_COLOR>> {
        - id: AutoField
        + title: CharField(255)
        + address: CharField(500)
        + price: DecimalField(12,2)
        + bedrooms: PositiveSmallIntegerField
        + bathrooms: DecimalField(3,1)
        + square_footage: PositiveIntegerField
        + description: TextField
        + status: CharField(10)
        + created_at: DateTimeField
        + updated_at: DateTimeField
        --
        + STATUS_CHOICES: tuple
        --
        + __str__(): str
    }

    class PropertyImage <<ENTITY_COLOR>> {
        - id: AutoField
        + image: ImageField
        + order: PositiveSmallIntegerField
        --
        + __str__(): str
    }

    class Favorite <<ENTITY_COLOR>> {
        - id: AutoField
        + added_at: DateTimeField
        --
        + __str__(): str
    }

    class PropertyMessage <<ENTITY_COLOR>> {
        - id: AutoField
        + content: TextField
        + timestamp: DateTimeField
        + read: BooleanField
        --
        + __str__(): str
    }

    class SearchHistory <<ENTITY_COLOR>> {
        - id: AutoField
        + query: TextField
        + timestamp: DateTimeField
        --
        + __str__(): str
    }

    class Recommendation <<ENTITY_COLOR>> {
        - id: AutoField
        + score: FloatField
        + created_at: DateTimeField
        --
        + __str__(): str
    }
}

' ===========================================
' FORMS
' ===========================================

package "Forms" <<Frame>> {

    class CustomerRegistrationForm <<FORM_COLOR>> {
        + username: CharField
        + email: EmailField
        + first_name: CharField
        + last_name: CharField
        + password1: CharField
        + password2: CharField
        + profile_image: ImageField
        --
        + save(commit: bool): User
    }

    class AgentRegistrationForm <<FORM_COLOR>> {
        + username: CharField
        + email: EmailField
        + first_name: CharField
        + last_name: CharField
        + password1: CharField
        + password2: CharField
        + phone_number: CharField
        + bio: TextField
        + profile_image: ImageField
        --
        + save(commit: bool): User
    }

    class CustomLoginForm <<FORM_COLOR>> {
        + username: CharField
        + password: CharField
    }

    class KeyBasedPasswordResetForm <<FORM_COLOR>> {
        + unique_key: CharField(9)
        + new_password: CharField
        + confirm_password: CharField
        --
        + clean(): dict
    }

    class ProfileUpdateForm <<FORM_COLOR>> {
        + first_name: CharField
        + last_name: CharField
        + email: EmailField
        + phone_number: CharField
        + bio: TextField
        + profile_image: ImageField
    }

    class PropertyForm <<FORM_COLOR>> {
        + title: CharField
        + address: CharField
        + price: DecimalField
        + bedrooms: PositiveSmallIntegerField
        + bathrooms: DecimalField
        + square_footage: PositiveIntegerField
        + description: TextField
        + status: CharField
        --
        + __init__(*args, **kwargs): void
    }

    class PropertyImageForm <<FORM_COLOR>> {
        + image1: ImageField
        + image2: ImageField
        + image3: ImageField
    }
}

' ===========================================
' VIEWS
' ===========================================

package "Views" <<Frame>> {

    class PropertyListView <<VIEW_COLOR>> {
        + model: Property
        + template_name: str
        + context_object_name: str
        + paginate_by: int
        --
        + get_queryset(): QuerySet
        + get_context_data(**kwargs): dict
    }

    class PropertyDetailView <<VIEW_COLOR>> {
        + model: Property
        + template_name: str
        + context_object_name: str
        --
        + get_context_data(**kwargs): dict
    }

    class PropertyCreateView <<VIEW_COLOR>> {
        + model: Property
        + form_class: PropertyForm
        + template_name: str
        + success_url: str
        --
        + form_valid(form): HttpResponse
        + test_func(): bool
    }

    class AgentPropertyListView <<VIEW_COLOR>> {
        + model: Property
        + template_name: str
        + context_object_name: str
        --
        + get_queryset(): QuerySet
        + test_func(): bool
    }

    class SearchView <<VIEW_COLOR>> {
        + template_name: str
        --
        + search_properties(request): HttpResponse
        + recommendations_view(request): HttpResponse
    }
}

' ===========================================
' UTILITY CLASSES
' ===========================================

package "Utilities" <<Frame>> {

    class generate_unique_key <<UTILITY_COLOR>> {
        --
        + generate_unique_key(): str
    }

    class SemanticSearchService <<UTILITY_COLOR>> {
        - model: SentenceTransformer
        --
        + encode_query(query: str): ndarray
        + encode_properties(texts: list): ndarray
        + calculate_similarity(query_vector, property_vectors): ndarray
        + rank_properties(properties, similarities): list
    }

    class RecommendationService <<UTILITY_COLOR>> {
        --
        + update_recommendations(user, query, results): void
        + calculate_score(rank: int): float
    }
}

' ===========================================
' RELATIONSHIPS
' ===========================================

' User relationships
User ||--o{ Property : "agent"
User ||--o{ Favorite : "user"
User ||--o{ PropertyMessage : "sender"
User ||--o{ SearchHistory : "user"
User ||--o{ Recommendation : "user"

' Property relationships
Property ||--o{ PropertyImage : "property"
Property ||--o{ Favorite : "property"
Property ||--o{ PropertyMessage : "property"
Property ||--o{ SearchHistory : "property"
Property ||--o{ Recommendation : "property"

' Form to Model relationships
CustomerRegistrationForm ..> User : "creates"
AgentRegistrationForm ..> User : "creates"
ProfileUpdateForm ..> User : "updates"
PropertyForm ..> Property : "creates/updates"
PropertyImageForm ..> PropertyImage : "creates"

' View to Model relationships
PropertyListView --> Property : "lists"
PropertyDetailView --> Property : "displays"
PropertyCreateView --> Property : "creates"
AgentPropertyListView --> Property : "lists agent's"
SearchView --> Property : "searches"
SearchView --> SearchHistory : "logs"
SearchView --> Recommendation : "updates"

' Service relationships
SemanticSearchService ..> Property : "analyzes"
RecommendationService ..> Recommendation : "manages"
generate_unique_key ..> User : "generates key for"

' Inheritance
CustomerRegistrationForm --|> UserCreationForm
AgentRegistrationForm --|> UserCreationForm
CustomLoginForm --|> AuthenticationForm
ProfileUpdateForm --|> ModelForm
PropertyForm --|> ModelForm
PropertyImageForm --|> Form

PropertyListView --|> ListView
PropertyDetailView --|> DetailView
PropertyCreateView --|> CreateView
AgentPropertyListView --|> ListView

User --|> AbstractUser

note top of User
    Custom user model extending Django's AbstractUser
    Supports three user types: customer, agent, admin
    Each user gets a unique 9-character key for password reset
end note

note top of Property
    Core entity representing real estate listings
    Supports status tracking: available, sold, pending
    Includes comprehensive property details
end note

note top of SemanticSearchService
    AI-powered search using SentenceTransformers
    Implements cosine similarity for property matching
    Falls back to keyword search if AI unavailable
end note

note bottom of RecommendationService
    Generates personalized property recommendations
    Uses search history and user behavior patterns
    Maintains recommendation scores for ranking
end note

@enduml
