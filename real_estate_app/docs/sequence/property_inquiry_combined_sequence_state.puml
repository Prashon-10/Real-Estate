@startuml Property_Inquiry_Process

!theme plain
skinparam backgroundColor #f8f9fa
skinparam sequenceArrowThickness 1.5
skinparam roundcorner 10
skinparam maxMessageSize 150
skinparam ParticipantPadding 5
skinparam BoxPadding 2
skinparam minClassWidth 70
skinparam SequenceGroupBorderThickness 0
skinparam SequenceLifeLineBorderThickness 1

actor User as U
participant "Frontend\n(React/HTML)" as F
participant "Django\nViews" as D
participant "Property\nModel" as PM
participant "Message\nModel" as MM
database "SQLite\nDatabase" as DB
participant "WebSocket\nHandler" as WS

U -> F : Browse Properties
F -> D : GET /properties/
D -> PM : Property.objects.filter(status available)
PM -> DB : SELECT properties WHERE status available
DB --> PM : property_list
PM --> D : queryset
D --> F : render template with context
F --> U : Display property cards

U -> F : Search properties
F -> D : POST /search/ with criteria
D -> PM : filter by price, bedrooms, etc
PM -> DB : SELECT with filters and AI ranking
DB --> PM : filtered_results
PM --> D : ranked_properties
D --> F : JSON response
F --> U : Update property list

U -> F : View property details
F -> D : GET /property/id/
D -> PM : get_object_or_404(Property, id)
PM -> DB : SELECT property with images and messages
DB --> PM : property_data
PM --> D : property_instance
D --> F : render detail template
F --> U : Show full property info

U -> F : Send inquiry message
F -> D : POST /property/id/send-message/
D -> MM : PropertyMessage.objects.create()
MM -> DB : INSERT INTO property_messages
DB --> MM : message_id
MM --> D : message_instance
D -> WS : trigger_notification(agent_id)
WS -> F : WebSocket push to agent
D --> F : success response
F --> U : Message sent successfully

@enduml