@startuml RealEstate_Class_Diagram
!theme plain
skinparam backgroundColor #FFFFFF
skinparam class {
    BackgroundColor #E8F4FD
    BorderColor #2196F3
    FontColor #1976D2
    AttributeFontColor #37474F
    AttributeFontSize 10
    HeaderBackgroundColor #2196F3
    HeaderFontColor #FFFFFF
}
skinparam interface {
    BackgroundColor #E1F5FE
    BorderColor #0277BD
    FontColor #01579B
}
skinparam abstract {
    BackgroundColor #F3E5F5
    BorderColor #7B1FA2
    FontColor #4A148C
}

title Real Estate Platform - Class Diagram (Wide Layout)
footer Generated: %date("yyyy-MM-dd")

' Abstract Base Classes
abstract class BaseModel {
    + id: AutoField
    + created_at: DateTimeField
    + updated_at: DateTimeField
    --
    + save(): void
    + delete(): void
    + __str__(): string
}

abstract class TimestampedModel {
    + created_at: DateTimeField
    + updated_at: DateTimeField
    + created_by: ForeignKey
    + updated_by: ForeignKey
    --
    + get_created_date(): date
    + get_updated_date(): date
}

' User Management Classes
class User {
    + id: AutoField
    + username: CharField(unique)
    + email: EmailField(unique)
    + first_name: CharField
    + last_name: CharField
    + password: CharField
    + is_staff: BooleanField
    + is_active: BooleanField
    + is_superuser: BooleanField
    + date_joined: DateTimeField
    + last_login: DateTimeField
    --
    + get_full_name(): string
    + get_short_name(): string
    + has_perm(perm): boolean
    + has_perms(perms): boolean
    + email_user(subject, message): void
    + is_authenticated(): boolean
}

class UserProfile {
    + id: AutoField
    + user: OneToOneField(User)
    + phone_number: CharField
    + address: TextField
    + city: CharField
    + state: CharField
    + zip_code: CharField
    + country: CharField
    + date_of_birth: DateField
    + profile_picture: ImageField
    + bio: TextField
    + website: URLField
    + linkedin_profile: URLField
    + twitter_handle: CharField
    --
    + get_age(): int
    + get_full_address(): string
    + get_profile_completion(): float
    + update_profile(data): boolean
}

class UserRole {
    + CUSTOMER: string = "customer"
    + AGENT: string = "agent"
    + ADMIN: string = "admin"
    + MANAGER: string = "manager"
    --
    + id: AutoField
    + user: ForeignKey(User)
    + role: CharField(choices)
    + is_active: BooleanField
    + assigned_date: DateTimeField
    + assigned_by: ForeignKey(User)
    --
    + get_role_display(): string
    + has_permission(permission): boolean
    + activate_role(): void
    + deactivate_role(): void
}

' Property Management Classes
class Property {
    + HOUSE: string = "house"
    + APARTMENT: string = "apartment"
    + CONDO: string = "condo"
    + VILLA: string = "villa"
    + TOWNHOUSE: string = "townhouse"
    + LAND: string = "land"
    --
    + id: AutoField
    + title: CharField
    + description: TextField
    + property_type: CharField(choices)
    + price: DecimalField
    + bedrooms: PositiveIntegerField
    + bathrooms: PositiveIntegerField
    + area: FloatField
    + address: CharField
    + city: CharField
    + state: CharField
    + zip_code: CharField
    + country: CharField
    + latitude: FloatField
    + longitude: FloatField
    + owner: ForeignKey(User)
    + agent: ForeignKey(User)
    + is_featured: BooleanField
    + is_active: BooleanField
    + views_count: PositiveIntegerField
    + created_at: DateTimeField
    + updated_at: DateTimeField
    --
    + get_absolute_url(): string
    + get_price_display(): string
    + get_full_address(): string
    + get_type_display(): string
    + increment_views(): void
    + is_available(): boolean
    + get_main_image(): PropertyImage
    + get_similar_properties(): QuerySet
    + calculate_price_per_sqft(): decimal
}

class PropertyImage {
    + id: AutoField
    + property: ForeignKey(Property)
    + image: ImageField
    + alt_text: CharField
    + is_primary: BooleanField
    + order: PositiveIntegerField
    + uploaded_at: DateTimeField
    --
    + get_image_url(): string
    + get_thumbnail_url(): string
    + set_as_primary(): void
    + get_image_size(): tuple
    + compress_image(): void
}

class PropertyFeature {
    + id: AutoField
    + property: ForeignKey(Property)
    + name: CharField
    + value: CharField
    + category: CharField
    + is_highlighted: BooleanField
    --
    + __str__(): string
    + get_category_display(): string
}

class PropertyAmenity {
    + id: AutoField
    + name: CharField(unique)
    + icon: CharField
    + category: CharField
    + description: TextField
    + is_active: BooleanField
    --
    + __str__(): string
    + get_properties_count(): int
}

' Booking and Inquiry Classes
class Booking {
    + PENDING: string = "pending"
    + CONFIRMED: string = "confirmed"
    + COMPLETED: string = "completed"
    + CANCELLED: string = "cancelled"
    + REJECTED: string = "rejected"
    --
    + id: AutoField
    + property: ForeignKey(Property)
    + customer: ForeignKey(User)
    + agent: ForeignKey(User)
    + booking_date: DateTimeField
    + message: TextField
    + status: CharField(choices)
    + total_amount: DecimalField
    + payment_status: CharField
    + created_at: DateTimeField
    + updated_at: DateTimeField
    + notes: TextField
    --
    + get_status_display(): string
    + can_be_cancelled(): boolean
    + can_be_modified(): boolean
    + send_confirmation(): void
    + calculate_duration(): timedelta
    + is_upcoming(): boolean
    + mark_as_completed(): void
    + get_payment_status_display(): string
}

class Inquiry {
    + id: AutoField
    + property: ForeignKey(Property)
    + customer: ForeignKey(User)
    + name: CharField
    + email: EmailField
    + phone: CharField
    + message: TextField
    + is_read: BooleanField
    + is_responded: BooleanField
    + created_at: DateTimeField
    + response_date: DateTimeField
    --
    + mark_as_read(): void
    + mark_as_responded(): void
    + send_auto_response(): void
    + get_response_time(): timedelta
}

' Communication Classes
class Message {
    + id: AutoField
    + sender: ForeignKey(User)
    + recipient: ForeignKey(User)
    + subject: CharField
    + content: TextField
    + is_read: BooleanField
    + parent: ForeignKey(Message)
    + booking: ForeignKey(Booking)
    + created_at: DateTimeField
    --
    + mark_as_read(): void
    + is_reply(): boolean
    + get_thread(): QuerySet
    + send_notification(): void
}

class Notification {
    + EMAIL: string = "email"
    + SMS: string = "sms"
    + PUSH: string = "push"
    + IN_APP: string = "in_app"
    --
    + id: AutoField
    + user: ForeignKey(User)
    + title: CharField
    + message: TextField
    + notification_type: CharField(choices)
    + is_read: BooleanField
    + is_sent: BooleanField
    + sent_at: DateTimeField
    + data: JSONField
    + created_at: DateTimeField
    --
    + send(): boolean
    + mark_as_read(): void
    + mark_as_sent(): void
    + get_type_display(): string
}

' Search and Favorites Classes
class SearchQuery {
    + id: AutoField
    + user: ForeignKey(User)
    + query_text: CharField
    + location: CharField
    + min_price: DecimalField
    + max_price: DecimalField
    + bedrooms: PositiveIntegerField
    + bathrooms: PositiveIntegerField
    + property_type: CharField
    + amenities: ManyToManyField(PropertyAmenity)
    + results_count: PositiveIntegerField
    + created_at: DateTimeField
    --
    + execute_search(): QuerySet
    + save_search(): void
    + get_similar_searches(): QuerySet
    + update_results_count(): void
}

class Favorite {
    + id: AutoField
    + user: ForeignKey(User)
    + property: ForeignKey(Property)
    + created_at: DateTimeField
    + notes: TextField
    --
    + remove(): void
    + add_note(note): void
    + get_user_favorites(): QuerySet
}

class SavedSearch {
    + id: AutoField
    + user: ForeignKey(User)
    + name: CharField
    + search_query: ForeignKey(SearchQuery)
    + email_alerts: BooleanField
    + frequency: CharField
    + last_run: DateTimeField
    + is_active: BooleanField
    + created_at: DateTimeField
    --
    + run_search(): QuerySet
    + send_alert(): void
    + activate(): void
    + deactivate(): void
}

' Payment and Transaction Classes
class Payment {
    + PENDING: string = "pending"
    + COMPLETED: string = "completed"
    + FAILED: string = "failed"
    + REFUNDED: string = "refunded"
    --
    + id: AutoField
    + booking: OneToOneField(Booking)
    + amount: DecimalField
    + currency: CharField
    + payment_method: CharField
    + transaction_id: CharField
    + status: CharField(choices)
    + gateway_response: JSONField
    + created_at: DateTimeField
    + processed_at: DateTimeField
    --
    + process_payment(): boolean
    + refund_payment(): boolean
    + get_status_display(): string
    + is_successful(): boolean
}

class Commission {
    + id: AutoField
    + agent: ForeignKey(User)
    + booking: ForeignKey(Booking)
    + base_amount: DecimalField
    + commission_rate: DecimalField
    + commission_amount: DecimalField
    + is_paid: BooleanField
    + paid_date: DateTimeField
    + created_at: DateTimeField
    --
    + calculate_commission(): decimal
    + mark_as_paid(): void
    + get_total_commission(): decimal
}

' Analytics and Reporting Classes
class PropertyView {
    + id: AutoField
    + property: ForeignKey(Property)
    + user: ForeignKey(User)
    + ip_address: GenericIPAddressField
    + user_agent: TextField
    + referrer: URLField
    + created_at: DateTimeField
    --
    + is_unique_view(): boolean
    + get_view_duration(): timedelta
}

class AnalyticsReport {
    + DAILY: string = "daily"
    + WEEKLY: string = "weekly"
    + MONTHLY: string = "monthly"
    --
    + id: AutoField
    + report_type: CharField(choices)
    + date_from: DateField
    + date_to: DateField
    + data: JSONField
    + generated_by: ForeignKey(User)
    + created_at: DateTimeField
    --
    + generate_report(): dict
    + export_to_pdf(): string
    + export_to_excel(): string
    + get_summary(): dict
}

' Relationships
BaseModel <|-- User
BaseModel <|-- Property
BaseModel <|-- Booking
BaseModel <|-- Message
BaseModel <|-- Notification

User ||--|| UserProfile : has
User ||--o{ UserRole : has roles
User ||--o{ Property : owns/manages
User ||--o{ Booking : makes/handles
User ||--o{ Message : sends/receives
User ||--o{ Notification : receives
User ||--o{ SearchQuery : performs
User ||--o{ Favorite : has
User ||--o{ SavedSearch : creates

Property ||--o{ PropertyImage : has
Property ||--o{ PropertyFeature : has
Property }o--o{ PropertyAmenity : has
Property ||--o{ Booking : receives
Property ||--o{ Inquiry : receives
Property ||--o{ Favorite : favorited by
Property ||--o{ PropertyView : viewed

Booking ||--|| Payment : has payment
Booking ||--o{ Commission : generates
Booking ||--o{ Message : related to

SearchQuery ||--|| SavedSearch : saved as
SearchQuery }o--o{ PropertyAmenity : filters by

' Interface definitions
interface IPaymentGateway {
    + process_payment(amount, method): boolean
    + refund_payment(transaction_id): boolean
    + get_transaction_status(id): string
}

interface INotificationService {
    + send_email(recipient, subject, message): boolean
    + send_sms(phone, message): boolean
    + send_push_notification(user, title, message): boolean
}

interface ISearchEngine {
    + search_properties(query): QuerySet
    + suggest_properties(user): QuerySet
    + get_trending_searches(): list
}

' Layout hints for wide format
User -[hidden]right- Property
Booking -[hidden]right- Message
SearchQuery -[hidden]right- Favorite
Payment -[hidden]down- Commission

@enduml
